# Grub embedded configuration file for:
# - Full BIOS/EFI images with core.img in the boot partition
# - BIOS-only live image with enough space in the MBR gap

# Look for BIOS images
search --set=root --label ostree --hint $bootdev,
if [ "$root" ]; then
    regexp -s 1:dev '(.*),(.*)' $root
    if [ "$dev" == "$bootdev" ]; then
        if [ -e ($root)/boot/grub/grub.cfg ]; then
            set prefix=($root)/boot/grub
            configfile ($root)/boot/grub/grub.cfg
        fi
    fi
fi

# Look for live images
search.file /endless/grub/grub.cfg eoslive $bootdev,
if [ "$eoslive" ]; then
    regexp -s 1:dev '(.*),(.*)' $eoslive
    if [ "$dev" == "$bootdev" ]; then
        export eoslive
        set prefix=($eoslive)/endless/grub
        configfile ($eoslive)/endless/grub/grub.cfg
    fi
fi

# If everything went wrong try to chainload a Windows image. Good luck.
for dev in ($bootdev,*); do
    regexp -s device '\((.*)\)' $dev

    if test ( -f ($device)/bootmgr -a -f ($device)/Boot/BCD ) ; then
        set root=$device
        chainloader +1
    elif test ( -f ($device)/ntldr -a -e ($device)/ntdetect.com -a -f ($device)/boot.ini ) ; then
        set root=$device
        regexp -s devnum 'hd([0-9]+)' $root
        if test "$devnum" != "0"; then
            drivemap -s hd0 $root
        fi
        chainloader +1
    fi
done

echo "Unable to boot the image"
sleep -i 10
