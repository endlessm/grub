#! /bin/sh
set -e

if [ $# -lt 6 ]; then
	echo "usage: $0 GRUB-MKSTANDALONE GRUB-CORE OUTPUT-DIRECTORY PLATFORM EFI-NAME CONF-NAME"
	exit 1
fi

grub_mkstandalone="$1"
grub_core="$2"
outdir="$3"
platform="$4"
efi_name="$5"
conf_name="$6"

workdir=

cleanup () {
	[ -z "$workdir" ] || rm -rf "$workdir"
}
trap cleanup EXIT HUP INT QUIT TERM

rm -rf "$outdir"
mkdir -p "$outdir"

workdir="$(mktemp -d build-sa-efi-images.XXXXXX)"

# Standalone GRUB

mkdir -p "$workdir/memdisk/boot/grub/fonts"

cp "$conf_name" "$workdir/memdisk/boot/grub/grub.cfg"
cp "$grub_core/../unicode.pf2" "$workdir/memdisk/boot/grub/fonts"

# grub_mkstandalone is stupid so we must call it from inside memdisk directory

grub_mkstandalone=$(pwd)/$grub_mkstandalone
grub_core=$(pwd)/$grub_core
outdir=$(pwd)/$outdir

modules=
modules="$modules all_video blscfg boot btrfs cat chain configfile disk echo efifwsetup efinet"
modules="$modules ext2 exfat fat font gcry_sha512 gcry_rsa gettext gfxmenu gfxterm gfxterm_background gzio"
modules="$modules halt hfsplus iso9660 jpeg keystatus loadenv loopback linux linuxefi"
modules="$modules lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs"
modules="$modules part_apple part_msdos part_gpt password_pbkdf2 png probe read reboot regexp"
modules="$modules search search_fs_uuid search_fs_file search_label search_fs_type"
modules="$modules sleep test time true verify video file squash4 ls"

( cd "$workdir/memdisk" && "$grub_mkstandalone" --modules="$modules" \
	-d "$grub_core" -O "$platform" -o "$outdir/$efi_name.efi" \
	$(find -type f))

exit 0
