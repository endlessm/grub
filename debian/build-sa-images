#! /bin/sh
set -e

if [ $# -ne 6 ]; then
	echo "usage: $0 GRUB-MKSTANDALONE GRUB-BIOS-SETUP GRUB-NTLDR-IMG GRUB-CORE OUTPUT-DIRECTORY CONF-NAME"
	exit 1
fi

grub_mkstandalone="$1"
grub_bios_setup="$2"
grub_ntldr_img="$3"
grub_core="$4"
outdir="$5"
conf_name="$6"

img=

cleanup () {
	if [ -n "${img_loop}" ]; then
		partx -v -d "${img_loop}"
		losetup -d "${img_loop}"
	fi
	rm -rf "${img}"
	rm -f "${grub_core}/core.img"
	rm -f "${grub_core}/eltorito.img"
}
trap cleanup EXIT HUP INT QUIT TERM

rm -rf "${outdir}"
mkdir -p "${outdir}"

img="$(mktemp img.XXXXXX)"
truncate -s 70M "${img}"

(
  echo -n "start=2048, "
  echo "size=62MiB, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
  echo "size=1MiB, type=21686148-6449-6E6F-744E-656564454649"
) | sfdisk --force --label gpt "${img}"

img_loop=$(losetup -f --show "${img}")
partx -a -v "${img_loop}"
bios_boot_loop=${img_loop}p2


EMBEDDED_MODULES="
	biosdisk
	ext2
	exfat
	ntfs
	part_msdos
	part_gpt
	"

MEMDISK_MODULES="
	normal
	search
	configfile
	regexp
	"
ISO_EMBEDDED_MODULES="
	${EMBEDDED_MODULES}
	iso9660
	"

# Capture BIOS-boot GRUB boot.img and core.img for live+installer USBs.
#
# grub-install invokes grub-mkimage, which writes a core.img file to
# /boot/grub/i386-pc/; it then invokes grub-bios-setup to write this
# file to the BIOS boot partition, and write an appropriate MBR (boot.img,
# as shipped with GRUB, patched with the offset to the BIOS boot
# partition).
#
# When dealing with standalone images instead of grub-mkimage,
# grub-mkstandalone is used.
#
# You might hope that we could just save core.img somewher, and later
# dd it verbatim onto the BIOS boot partition, but it transpires that
# grub-bios-setup does more than this: it patches the partition offset
# here too, and (if there's extra space, which there is here) adds some
# redundancy to the image.
#
# We could disable the latter with --no-rs-codes, but we'd still have to
# add the offsets. So we actually install this flavour of GRUB,
# capturing the boot sector and BIOS boot partition.
#
# Also create BIOS-boot GRUB core.img for images on NTFS. Windows only supports
# BIOS-booting from MBR partition tables, so the pristine boot.img and
# core.img (which both have a 1-sector offset embedded in them) are fine.
"${grub_mkstandalone}" \
             --directory="${grub_core}" \
             --format=i386-pc \
             --themes= \
             --fonts= \
             --modules="${EMBEDDED_MODULES}" \
             --install-modules="${MEMDISK_MODULES}" \
             --output="${grub_core}/core.img" \
             /boot/grub/grub.cfg=\'"${conf_name}"\'
"${grub_bios_setup}" \
             --directory="${grub_core}" \
             "${img}"

mkdir -p "${outdir}/live"
dd if="${img_loop}" of="${outdir}/live/boot.img" bs=446 count=1
dd if="${bios_boot_loop}" of="${outdir}/live/core.img" bs=512 count=2048

mkdir -p "${outdir}/ntfs"
cp -a "${grub_core}/boot.img" "${outdir}/ntfs"
cp -a "${grub_core}/core.img" "${outdir}/ntfs"

mkdir -p "${outdir}/eosldr"
"${grub_ntldr_img}" --grub2 --boot-file=eosldr -o "${outdir}/eosldr/eosldr.mbr"
cat "${grub_core}/lnxboot.img" "${grub_core}/core.img" > "${outdir}/eosldr/eosldr"

# Save boot_hybrid.img MBR code for the hybrid ISO and the El-Torito boot image
"${grub_mkstandalone}" \
             --directory="${grub_core}" \
             --format=i386-pc-eltorito \
             --themes= \
             --fonts= \
             --modules="${ISO_EMBEDDED_MODULES}" \
             --install-modules="${MEMDISK_MODULES}" \
             --output="${grub_core}/eltorito.img" \
             /boot/grub/grub.cfg=\'"${conf_name}"\'


mkdir -p "${outdir}/iso"
cp -a "${grub_core}/boot_hybrid.img" "${outdir}/iso"
cp -a "${grub_core}/eltorito.img" "${outdir}/iso"

exit 0
